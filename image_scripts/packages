export VER_ALPINE="445"
ART_ALPINE="alpine:latest-$VER_ALPINE.tar.gz"
CON_ALPINE="1"
URL_ALPINE="https://circle-artifacts.com/gh/gliderlabs/docker-alpine/$VER_ALPINE/artifacts/$CON_ALPINE/home/ubuntu/docker-alpine/images/$ART_ALPINE"
CHK_ALPINE="a131e1b07efffe4ff0a4b7e33520446f36a17eedab010bce7a251f3763b2f50c"
SUM_ALPINE="sha256"

export VER_WEAVE="91044ac0fafb3678eb50100acc76a537ba43f06d"
RPO_WEAVE="https://github.com/weaveworks/weave.git"
DIR_WEAVE="weave-$VER_WEAVE-alpine-$VER_ALPINE"
SRC_WEAVE="$DIR_WEAVE.tar.gz"
GET_WEAVE() {
  export GOPATH="$PWD/$DIR_WEAVE"
  d="$GOPATH/src/github.com/weaveworks"
  mkdir -p "$d"
  cd "$d"
  git clone "$RPO_WEAVE"
  cd weave
  git checkout "$VER_WEAVE"
  git submodule update --init 1>&2
  cat >> Makefile << 'EOF'
get_weave_deps: $(DOCKER_DISTRIB)
EOF
  make "WEAVEEXEC_DOCKER_VERSION=$VER_DOCKER" get_weave_deps 1>&2
  # Get Alpine Docker image direct so we don't need Docker on build machine
  curl -O "$URL_ALPINE" 1>&2
  "${SUM_ALPINE}sum" -c --quiet << EOF
$CHK_ALPINE  $ART_ALPINE
EOF
  tar -C "$GOPATH/.." -zc "$DIR_WEAVE"
}
BLD_WEAVE() {
  d="$GOPATH/src/github.com/weaveworks/weave"
  rm -rf "$d"
  cp -af * "$GOPATH"
  cd "$d"
  patch -p0 << 'EOF'
--- Makefile.orig
+++ Makefile
@@ -11,7 +11,7 @@ RUN_FLAGS=-ti
 COVERAGE=
 
 DOCKERHUB_USER=weaveworks
-WEAVE_VERSION=git-$(shell git rev-parse --short=12 HEAD)
+WEAVE_VERSION=$(VER_WEAVE)
 
 WEAVER_EXE=prog/weaver/weaver
 WEAVEPROXY_EXE=prog/weaveproxy/weaveproxy
@@ -57,7 +57,7 @@ BUILD_FLAGS=-i -ldflags "-extldflags \"-static\" -X main.version=$(WEAVE_VERSION
 
 PACKAGE_BASE=$(shell go list -e ./)
 
-all: $(WEAVE_EXPORT)
+all: $(IMAGES_UPTODATE)
 exes: $(EXES)
 testrunner: $(RUNNER_EXE) $(TEST_TLS_EXE)
 
EOF
  go clean -i net
  go install -tags netgo std
  # We can't make the docker images themselves until we have docker running
  touch .build.uptodate
  make SUDO= BUILD_IN_CONTAINER=false \
      prog/weaver/weaver \
      prog/weaveproxy/weaveproxy \
      prog/sigproxy/sigproxy \
      prog/weavewait/weavewait \
      prog/weavewait/weavewait_noop \
      prog/weavewait/weavewait_nomcast \
      prog/weaveutil/weaveutil \
      prog/plugin/plugin
  ln -sf "$d/weave" "$GOPATH/bin"
}
PST_WEAVE() {
  export WEAVE_VERSION="$VER_WEAVE"
}

VER_PYTHON_DAEMON="2.1.1"
DIR_PYTHON_DAEMON="python-daemon-$VER_PYTHON_DAEMON"
SRC_PYTHON_DAEMON="$DIR_PYTHON_DAEMON.tar.gz"
GET_PYTHON_DAEMON() {
  mkdir "$DIR_PYTHON_DAEMON"
  pip install --download "$DIR_PYTHON_DAEMON" "python-daemon==$VER_PYTHON_DAEMON" 1>&2
  tar -zc "$DIR_PYTHON_DAEMON"
}
BLD_PYTHON_DAEMON() {
  pip install --no-index --find-links=. python-daemon
}

# CMake is required by nfqueue-bindings
VER_CMAKE="3.5.0"
DIR_CMAKE="cmake-$VER_CMAKE"
SRC_CMAKE="$DIR_CMAKE.tar.gz"
URL_CMAKE="http://www.cmake.org/files/v$(echo "$VER_CMAKE" | sed -r 's/([0-9]+\.[0-9]+).*/\1/')/$SRC_CMAKE"
CHK_CMAKE="92c83ad8a4fd6224cf6319a60b399854f55b38ebe9d297c942408b792b1a9efa"
SUM_CMAKE="sha256"
BLD_CMAKE() {
  patch -p0 << 'EOF'
--- Source/cmPolicies.cxx.orig
+++ Source/cmPolicies.cxx
@@ -364,11 +364,11 @@
 {
   PolicyStatus status = cmPolicies::WARN;
 
-  if (this->Status[(POLICY_STATUS_COUNT * id) + OLD])
+  if (this->Status.test((POLICY_STATUS_COUNT * id) + OLD))
     {
     status = cmPolicies::OLD;
     }
-  else if (this->Status[(POLICY_STATUS_COUNT * id) + NEW])
+  else if (this->Status.test((POLICY_STATUS_COUNT * id) + NEW))
     {
     status = cmPolicies::NEW;
     }
@@ -385,9 +385,9 @@
 
 bool cmPolicies::PolicyMap::IsDefined(cmPolicies::PolicyID id) const
 {
-  return this->Status[(POLICY_STATUS_COUNT * id) + OLD]
-      || this->Status[(POLICY_STATUS_COUNT * id) + WARN]
-      || this->Status[(POLICY_STATUS_COUNT * id) + NEW];
+  return this->Status.test((POLICY_STATUS_COUNT * id) + OLD)
+      || this->Status.test((POLICY_STATUS_COUNT * id) + WARN)
+      || this->Status.test((POLICY_STATUS_COUNT * id) + NEW);
 }
 
 bool cmPolicies::PolicyMap::IsEmpty() const
--- Source/cmPathLabel.h.orig
+++ Source/cmPathLabel.h
@@ -30,6 +30,10 @@
   // in no way imply any lexicographical order of the label
   bool operator < (const cmPathLabel& l) const;
   bool operator == (const cmPathLabel& l) const;
+  bool operator != (const cmPathLabel& l) const
+  {
+    return !this->operator==(l);
+  }
 
   const std::string& GetLabel() const { return this->Label; }
   const unsigned int& GetHash() const { return this->Hash; }
--- Source/cmParseArgumentsCommand.cxx.orig
+++ Source/cmParseArgumentsCommand.cxx
@@ -109,7 +109,7 @@
   for (argIter = list.begin(), argEnd = list.end();
        argIter != argEnd; ++argIter)
     {
-    const options_map::iterator optIter = options.find(*argIter);
+    options_map::iterator optIter = options.find(*argIter);
     if (optIter != options.end())
       {
       insideValues = NONE;
--- Source/cmListCommand.cxx.orig
+++ Source/cmListCommand.cxx
@@ -504,9 +504,9 @@
     }
 
   std::sort(removed.begin(), removed.end());
-  std::vector<size_t>::const_iterator remEnd =
+  std::vector<size_t>::iterator remEnd =
       std::unique(removed.begin(), removed.end());
-  std::vector<size_t>::const_iterator remBegin = removed.begin();
+  std::vector<size_t>::iterator remBegin = removed.begin();
 
   std::vector<std::string>::const_iterator argsEnd =
       cmRemoveIndices(varArgsExpanded, cmMakeRange(remBegin, remEnd));
--- Source/cmLocalGenerator.cxx.orig
+++ Source/cmLocalGenerator.cxx
@@ -2458,7 +2458,7 @@
       // -DNAME="value" instead of -D"NAME=value" to help VS6 parser.
       std::string::size_type eq = defineIt->find("=");
       def += defineIt->substr(0, eq);
-      if(eq != defineIt->npos)
+      if(eq != std::string::npos)
         {
         def += "=";
         def += this->EscapeForShell(defineIt->c_str() + eq + 1, true);
--- Source/cmFileCommand.cxx.orig
+++ Source/cmFileCommand.cxx
@@ -259,7 +259,16 @@
     }
   // If GetPermissions fails, pretend like it is ok. File open will fail if
   // the file is not writable
-  cmsys::ofstream file(fileName.c_str(), append?std::ios::app: std::ios::out);
+  std::ios_base::openmode om;
+  if (append)
+    {
+    om = std::ios::app;
+    }
+  else
+    {
+    om = std::ios::out;
+    }
+  cmsys::ofstream file(fileName.c_str(), om);
   if ( !file )
     {
     std::string error = "failed to open for writing (";
@@ -659,7 +668,7 @@
 #else
   cmsys::ifstream fin(fileName.c_str(), std::ios::in);
 #endif
-  if(!fin)
+  if(fin.fail())
     {
     std::ostringstream e;
     e << "STRINGS file \"" << fileName << "\" cannot be read.";
@@ -690,7 +699,7 @@
   std::string s;
   while((!limit_count || strings.size() < limit_count) &&
         (limit_input < 0 || static_cast<int>(fin.tellg()) < limit_input) &&
-        fin)
+        !fin.eof())
     {
     std::string current_str;
 
@@ -698,7 +707,7 @@
     for(unsigned int i=0; i<bytes_rem; ++i)
       {
       int c1 = fin.get();
-      if(!fin)
+      if(fin.eof())
         {
         fin.putback(static_cast<char>(c1));
         break;
@@ -753,7 +762,7 @@
         if(j != 0)
           {
           c = fin.get();
-          if(!fin || (c & 0xC0) != 0x80)
+          if(fin.eof() || (c & 0xC0) != 0x80)
             {
             fin.putback(static_cast<char>(c));
             break;
--- Source/cmFindPackageCommand.cxx.orig
+++ Source/cmFindPackageCommand.cxx
@@ -295,7 +295,7 @@
       }
     else if(doing == DoingConfigs)
       {
-      if(args[i].find_first_of(":/\\") != args[i].npos ||
+      if(args[i].find_first_of(":/\\") != std::string::npos ||
          cmSystemTools::GetFilenameLastExtension(args[i]) != ".cmake")
         {
         std::ostringstream e;
--- Source/cmTryRunCommand.cxx.orig
+++ Source/cmTryRunCommand.cxx
@@ -328,8 +328,16 @@
   if (error)
     {
     static bool firstTryRun = true;
-    cmsys::ofstream file(resultFileName.c_str(),
-                                  firstTryRun ? std::ios::out : std::ios::app);
+    std::ios_base::openmode om;
+    if (firstTryRun)
+      {
+      om = std::ios::out;
+      }
+    else
+      {
+      om = std::ios::app;
+      }
+    cmsys::ofstream file(resultFileName.c_str(), om);
     if ( file )
       {
       if (firstTryRun)
--- Utilities/cmjsoncpp/src/lib_json/json_reader.cpp.orig
+++ Utilities/cmjsoncpp/src/lib_json/json_reader.cpp
@@ -14,6 +14,7 @@
 #include <assert.h>
 #include <string.h>
 #include <istream>
+#include <string_iostream>
 
 #if defined(_MSC_VER) && _MSC_VER < 1500 // VC++ 8.0 and below
 #define snprintf _snprintf
--- Utilities/cmjsoncpp/src/lib_json/json_valueiterator.inl.orig
+++ Utilities/cmjsoncpp/src/lib_json/json_valueiterator.inl
@@ -45,7 +45,7 @@
 
 Value& ValueIteratorBase::deref() const {
 #ifndef JSON_VALUE_USE_INTERNAL_MAP
-  return current_->second;
+  return const_cast<Value&>(current_->second);
 #else
   if (isArray_)
     return ValueInternalArray::dereference(iterator_.array_);
--- Source/CTest/cmCTestSubmitHandler.cxx.orig
+++ Source/CTest/cmCTestSubmitHandler.cxx
@@ -647,7 +647,10 @@
 ::ParseResponse(cmCTestSubmitHandlerVectorOfChar chunk)
 {
   std::string output = "";
-  output.append(chunk.begin(), chunk.end());
+  for (size_t i = 0; i < chunk.size(); i += 1)
+    {
+    output += chunk[i];
+    }
 
   if(output.find("<cdash") != output.npos)
     {
--- Source/cmWriteFileCommand.cxx.orig
+++ Source/cmWriteFileCommand.cxx
@@ -70,8 +70,16 @@
     }
   // If GetPermissions fails, pretend like it is ok. File open will fail if
   // the file is not writable
-  cmsys::ofstream file(fileName.c_str(),
-                     overwrite?std::ios::out : std::ios::app);
+  std::ios_base::openmode om;
+  if (overwrite)
+    {
+    om = std::ios::out;
+    }
+  else
+    {
+    om = std::ios::app;
+    }
+  cmsys::ofstream file(fileName.c_str(), om);
   if ( !file )
     {
     std::string error = "Internal CMake error when trying to open file: ";
--- Utilities/cmjsoncpp/src/lib_json/json_value.cpp.orig
+++ Utilities/cmjsoncpp/src/lib_json/json_value.cpp
@@ -461,7 +461,10 @@
     int delta = int(value_.map_->size() - other.value_.map_->size());
     if (delta)
       return delta < 0;
-    return (*value_.map_) < (*other.value_.map_);
+    return std::lexicographical_compare(value_.map_->begin(),
+                                        value_.map_->end(),
+                                        other.value_.map_->begin(),
+                                        other.value_.map_->end());
   }
 #else
   case arrayValue:
EOF
  CFLAGS="$CPPFLAGS" CXXFLAGS="$CPPFLAGS" ./bootstrap "--prefix=$INSTALL_DIR"
  make
  make install
}

VER_SWIG="3.0.8"
DIR_SWIG="swig-$VER_SWIG"
SRC_SWIG="$DIR_SWIG.tar.gz"
URL_SWIG="http://downloads.sourceforge.net/project/swig/swig/$DIR_SWIG/$SRC_SWIG"
CHK_SWIG="58a475dbbd4a4d7075e5fe86d4e54c9edde39847cdb96a3053d87cb64a23a453"
SUM_SWIG="sha256"
BLD_SWIG() {
  ./configure "--prefix=$INSTALL_DIR"
  make
  make install
}

VER_NFQUEUE_BINDINGS="ca0fe77e5deb25a26baa4dbca3299102b31601ee"
RPO_NFQUEUE_BINDINGS="https://github.com/chifflier/nfqueue-bindings.git"
DIR_NFQUEUE_BINDINGS="nfqueue-bindings-$VER_NFQUEUE_BINDINGS"
SRC_NFQUEUE_BINDINGS="$DIR_NFQUEUE_BINDINGS.tar.gz"
GET_NFQUEUE_BINDINGS() {
  git clone "$RPO_NFQUEUE_BINDINGS" "$DIR_NFQUEUE_BINDINGS"
  cd "$DIR_NFQUEUE_BINDINGS"
  git checkout "$VER_NFQUEUE_BINDINGS"
  tar -C .. -zc "$DIR_NFQUEUE_BINDINGS"
}
BLD_NFQUEUE_BINDINGS() {
  patch -p0 << 'EOF'
--- python/CMakeLists.txt.orig
+++ python/CMakeLists.txt
@@ -20,8 +20,8 @@
 SWIG_LINK_LIBRARIES(nfqueue ${PYTHON_LIBRARIES} ${LIBNFQ_LDFLAGS})
 
 INSTALL(FILES ${CMAKE_CURRENT_BINARY_DIR}/nfqueue.py
-	DESTINATION ${LIB_INSTALL_DIR}/python${PYTHON_VERSION}/dist-packages/)
+	DESTINATION ${LIB_INSTALL_DIR}/python${PYTHON_VERSION}/site-packages/)
 
 INSTALL(FILES ${CMAKE_CURRENT_BINARY_DIR}/_nfqueue.so
-	DESTINATION ${LIB_INSTALL_DIR}/python${PYTHON_VERSION}/dist-packages/)
+	DESTINATION ${LIB_INSTALL_DIR}/python${PYTHON_VERSION}/site-packages/)
 
--- python/libnetfilter_queue_python.i.orig
+++ python/libnetfilter_queue_python.i
@@ -9,7 +9,6 @@
 }
 
 %{
-#include <arpa/inet.h>
 #include <linux/netfilter.h>
 #include <linux/ip.h>
 
@@ -59,7 +58,7 @@
                 p->qh = qh;
                 p->nfad = nfad;
                 payload_obj = SWIG_NewPointerObj((void*) p, SWIGTYPE_p_payload, 0 /* | SWIG_POINTER_OWN */);
-                arglist = Py_BuildValue("(N)",payload_obj);
+                arglist = Py_BuildValue("(i,O)",payload_obj);
                 result = PyEval_CallObject(func,arglist);
                 free(p);
                 Py_DECREF(arglist);
--- nfq_common.c.orig
+++ nfq_common.c
@@ -1,4 +1,4 @@
-#include <arpa/inet.h>
+#include <stddef.h>
 #include <linux/netfilter.h>
 #include <linux/ip.h>
 #include <linux/socket.h>
--- CMakeLists.txt.orig
+++ CMakeLists.txt
@@ -30,7 +30,6 @@
 CHECK_FUNCTION_EXISTS(nfq_set_verdict2 HAVE_NFQ_SET_VERDICT2)
 
 ADD_SUBDIRECTORY(python)
-ADD_SUBDIRECTORY(perl)
 
 CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/config.h.cmake ${CMAKE_CURRENT_BINARY_DIR}/config.h)
 CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/nfq_version.h.cmake ${CMAKE_CURRENT_BINARY_DIR}/nfq_version.h)
EOF
  make PREFIX="$INSTALL_DIR" install
}

VER_PYINOTIFY="0.9.6"
DIR_PYINOTIFY="pyinotify-$VER_PYINOTIFY"
SRC_PYINOTIFY="$DIR_PYINOTIFY.tar.gz"
GET_PYINOTIFY() {
  mkdir "$DIR_PYINOTIFY"
  pip install --download "$DIR_PYINOTIFY" "pyinotify==$VER_PYINOTIFY" 1>&2
  tar -zc "$DIR_PYINOTIFY"
}
BLD_PYINOTIFY() {
  pip install --no-index --find-links=. pyinotify
}

VER_DNSPYTHON="1.12.0"
DIR_DNSPYTHON="dnspython-$VER_DNSPYTHON"
SRC_DNSPYTHON="$DIR_DNSPYTHON.tar.gz"
GET_DNSPYTHON() {
  mkdir "$DIR_DNSPYTHON"
  pip install --download "$DIR_DNSPYTHON" "dnspython==$VER_DNSPYTHON" 1>&2
  tar -zc "$DIR_DNSPYTHON"
}
BLD_DNSPYTHON() {
  pip install --no-index --find-links=. dnspython
}

VER_PYTHON_IPY="0.83"
DIR_PYTHON_IPY="python-ipy-$VER_PYTHON_IPY"
SRC_PYTHON_IPY="python-ipy-$VER_PYTHON_IPY.tar.gz"
GET_PYTHON_IPY() {
  mkdir "$DIR_PYTHON_IPY"
  pip install --download "$DIR_PYTHON_IPY" "IPy==$VER_PYTHON_IPY" 1>&2
  tar -zc "$DIR_PYTHON_IPY"
}
BLD_PYTHON_IPY() {
  pip install --no-index --find-links=. IPy
}

VER_TCPDUMP="4.7.4"
DIR_TCPDUMP="tcpdump-$VER_TCPDUMP"
SRC_TCPDUMP="$DIR_TCPDUMP.tar.gz"
URL_TCPDUMP="http://www.tcpdump.org/release/$SRC_TCPDUMP"
CHK_TCPDUMP="6be520269a89036f99c0b2126713a60965953eab921002b07608ccfc0c47d9af"
SUM_TCPDUMP="sha256"
BLD_TCPDUMP() {
  ./configure "--prefix=$INSTALL_DIR" --disable-smb
  make
  make install
}

VER_SCAPY="2.3.2"
DIR_SCAPY="scapy-$VER_SCAPY"
SRC_SCAPY="$DIR_SCAPY.tar.gz"
GET_SCAPY() {
  mkdir "$DIR_SCAPY"
  pip install --download "$DIR_SCAPY" "scapy==$VER_SCAPY" 1>&2
  tar -zc "$DIR_SCAPY"
}
BLD_SCAPY() {
  pip install --no-index --find-links=. scapy
}

VER_LIBCAP_NG="0.7.7"
DIR_LIBCAP_NG="libcap-ng-$VER_LIBCAP_NG"
SRC_LIBCAP_NG="$DIR_LIBCAP_NG.tar.gz"
URL_LIBCAP_NG="https://people.redhat.com/sgrubb/libcap-ng/$SRC_LIBCAP_NG"
CHK_LIBCAP_NG="615549ce39b333f6b78baee0c0b4ef18bc726c6bf1cca123dfd89dd963f6d06b"
SUM_LIBCAP_NG="sha256"
BLD_LIBCAP_NG() {
  ./configure "--prefix=$INSTALL_DIR" --with-python --without-python3
  make
  make install
}

VER_PYTHON_CONFIGOBJ="5.0.6"
DIR_PYTHON_CONFIGOBJ="configobj-$VER_PYTHON_CONFIGOBJ"
SRC_PYTHON_CONFIGOBJ="$DIR_PYTHON_CONFIGOBJ.tar.gz"
GET_PYTHON_CONFIGOBJ() {
  mkdir "$DIR_PYTHON_CONFIGOBJ"
  pip install --download "$DIR_PYTHON_CONFIGOBJ" "configobj==$VER_PYTHON_CONFIGOBJ" 1>&2
  tar -zc "$DIR_PYTHON_CONFIGOBJ"
}
BLD_PYTHON_CONFIGOBJ() {
  pip install --no-index --find-links=. configobj
}

VER_NFDHCPD="1000f2765a58c1c37ae7430ad6305de4fbd98344"
DIR_NFDHCPD="nfdhcpd-$VER_NFDHCPD"
SRC_NFDHCPD="$DIR_NFDHCPD.tar.gz"
URL_NFDHCPD="https://github.com/davedoesdev/nfdhcpd/archive/$VER_NFDHCPD.tar.gz"
CHK_NFDHCPD="f6f5b9444fa354cf39a35e2edbda1712d067feaeadae1501aad25116850661a0"
SUM_NFDHCPD="sha256"
BLD_NFDHCPD() {
  sed 's/nobody/nfdhcpd/' nfdhcpd.conf > "$INSTALL_DIR/etc/nfdhcpd.conf"
  cp nfdhcpd "$INSTALL_DIR/sbin"
}

VER_EBTABLES="2.0.10-4"
DIR_EBTABLES="ebtables-v$VER_EBTABLES"
SRC_EBTABLES="$DIR_EBTABLES.tar.gz"
URL_EBTABLES="ftp://ftp.netfilter.org/pub/ebtables/$SRC_EBTABLES"
CHK_EBTABLES="dc6f7b484f207dc712bfca81645f45120cb6aee3380e77a1771e9c34a9a4455d"
SUM_EBTABLES="sha256"
BLD_EBTABLES() {
  # Fix type redefinitions
  patch -p0 << 'EOF'
--- Makefile.orig
+++ Makefile
@@ -17,7 +17,7 @@
 SYSCONFIGDIR:=/etc/sysconfig
 DESTDIR:=
 
-CFLAGS:=-Wall -Wunused -Werror
+CFLAGS:=-Wall -Wunused -Werror -D__THROW= -D_LINUX_IN_H -D_LINUX_IN6_H -D_LINUX_IF_ETHER_H
 CFLAGS_SH_LIB:=-fPIC -O3
 CC:=gcc
 
--- include/ebtables_u.h.orig
+++ include/ebtables_u.h
@@ -24,6 +24,7 @@
 #ifndef EBTABLES_U_H
 #define EBTABLES_U_H
 #include <netinet/in.h>
+#include <netinet/ether.h>
 #include <linux/netfilter_bridge/ebtables.h>
 #include <linux/netfilter/x_tables.h>
 
EOF
  make "MANDIR=$INSTALL_DIR/man" \
       "ETCDIR=$INSTALL_DIR/etc" \
       "BINDIR=$INSTALL_DIR/sbin" \
       "INITDIR=$INSTALL_DIR/etc/rc.d/init.d" \
       "SYSCONFIGDIR=$INSTALL_DIR/etc/sysconfig" \
       "LIBDIR=$INSTALL_DIR/lib" install
}

VER_FOLD="239fb9333a01c5285b1206d8536e8e18a3812917"
RPO_FOLD="https://github.com/davedoesdev/fold.git"
DIR_FOLD="fold-$VER_FOLD"
SRC_FOLD="$DIR_FOLD.tar.gz"
GET_FOLD() {
  git clone "$RPO_FOLD"
  mv fold "$DIR_FOLD"
  cd "$DIR_FOLD"
  git checkout "$VER_FOLD"
  tar -C .. -zc "$DIR_FOLD"
}
BLD_FOLD() {
  mkdir -p "$INSTALL_DIR/lib/fold"
  cp -r fold utils "$INSTALL_DIR/lib/fold"
  cat > "$INSTALL_DIR/bin/fold" << 'EOF'
#!/bin/sh
exec "$INSTALL_DIR/lib/fold/fold" "$@"
EOF
  chmod +x "$INSTALL_DIR/bin/fold"
}
PST_FOLD() {
  export NFDHCPD_CFG="$INSTALL_DIR/etc/nfdhcpd.conf"
}

VER_LIBSODIUM="1.0.8"
DIR_LIBSODIUM="libsodium-$VER_LIBSODIUM"
SRC_LIBSODIUM="$DIR_LIBSODIUM.tar.gz"
URL_LIBSODIUM="https://download.libsodium.org/libsodium/releases/$SRC_LIBSODIUM"
CHK_LIBSODIUM="c0f191d2527852641e0a996b7b106d2e04cbc76ea50731b2d0babd3409301926"
SUM_LIBSODIUM="sha256"
BLD_LIBSODIUM() {
  ./configure "--prefix=$INSTALL_DIR"
  make
  make install
}

VER_ZEROMQ="4.1.4"
DIR_ZEROMQ="zeromq-$VER_ZEROMQ"
SRC_ZEROMQ="$DIR_ZEROMQ.tar.gz"
URL_ZEROMQ="http://download.zeromq.org/$SRC_ZEROMQ"
CHK_ZEROMQ="e99f44fde25c2e4cb84ce440f87ca7d3fe3271c2b8cfbc67d55e4de25e6fe378"
SUM_ZEROMQ="sha256"
BLD_ZEROMQ() {
  patch -p0 << 'EOF'
--- src/blob.hpp.orig
+++ src/blob.hpp
@@ -32,6 +32,7 @@
 
 #include <string>
 #include <string.h>
+#include <ios>
 
 // Borrowed from id3lib_strings.h:
 // They seem to be doing something for MSC, but since I only have gcc, I'll just do that
--- src/metadata.hpp.orig
+++ src/metadata.hpp
@@ -41,7 +41,7 @@
     {
         public:
 
-            typedef std::map <std::string, const std::string> dict_t;
+            typedef std::map <std::string, std::string> dict_t;
 
             metadata_t (const dict_t &dict);
             virtual ~metadata_t ();
--- src/socket_base.cpp.orig
+++ src/socket_base.cpp
@@ -30,6 +30,7 @@
 #include <new>
 #include <string>
 #include <algorithm>
+#include <cctype>
 
 #include "platform.hpp"

--- src/stream_engine.cpp.orig
+++ src/stream_engine.cpp
@@ -208,7 +208,7 @@
             //  Compile metadata.
             typedef metadata_t::dict_t properties_t;
             properties_t properties;
-            properties.insert(std::make_pair("Peer-Address", peer_address));
+            properties.insert(std::make_pair(std::string("Peer-Address"), peer_address));
             zmq_assert (metadata == NULL);
             metadata = new (std::nothrow) metadata_t (properties);
         }
@@ -815,7 +815,7 @@
 
     //  If we have a peer_address, add it to metadata
     if (!peer_address.empty()) {
-        properties.insert(std::make_pair("Peer-Address", peer_address));
+        properties.insert(std::make_pair(std::string("Peer-Address"), peer_address));
     }
 
     //  Add ZAP properties.
EOF
  sed -i 's/libzmq_werror="yes"/libzmq_werror="no"/' configure
  ./configure "--prefix=$INSTALL_DIR" --with-relaxed
  make
  make install
}

VER_LIBYAML="0.1.6"
DIR_LIBYAML="yaml-$VER_LIBYAML"
SRC_LIBYAML="$DIR_LIBYAML.tar.gz"
URL_LIBYAML="http://pyyaml.org/download/libyaml/$SRC_LIBYAML"
CHK_LIBYAML="7da6971b4bd08a986dd2a61353bc422362bd0edcc67d7ebaac68c95f74182749"
SUM_LIBYAML="sha256"
BLD_LIBYAML() {
  ./configure "--prefix=$INSTALL_DIR"
  make
  make install
}

VER_DMIDECODE="3.0"
DIR_DMIDECODE="dmidecode-$VER_DMIDECODE"
SRC_DMIDECODE="$DIR_DMIDECODE.tar.xz"
URL_DMIDECODE="http://download.savannah.gnu.org/releases/dmidecode/$SRC_DMIDECODE"
CHK_DMIDECODE="7ec35bb193729c1d593a1460b59d82d24b89102ab23fd0416e6cf4325d077e45"
SUM_DMIDECODE="sha256"
BLD_DMIDECODE() {
  make
  make prefix="$INSTALL_DIR" install
}

VER_VIRT_WHAT="1.15"
DIR_VIRT_WHAT="virt-what-$VER_VIRT_WHAT"
SRC_VIRT_WHAT="$DIR_VIRT_WHAT.tar.gz"
URL_VIRT_WHAT="http://people.redhat.com/~rjones/virt-what/files/$SRC_VIRT_WHAT"
CHK_VIRT_WHAT="7ab9220d4682eadf9139c6afe62d33ebd273fff69e49054279caba5514937c41"
SUM_VIRT_WHAT="sha256"
BLD_VIRT_WHAT() {
  ./configure "--prefix=$INSTALL_DIR"
  make
  make install
}

VER_SALT="2015.8.8"
DIR_SALT="salt-$VER_SALT"
SRC_SALT="$DIR_SALT.tar.gz"
GET_SALT() {
  mkdir "$DIR_SALT"
  pip install --download "$DIR_SALT" "salt==$VER_SALT" 1>&2
  tar -zc "$DIR_SALT"
}
BLD_SALT() {
  pip install --no-index --find-links=. salt
}

PACKAGES=("${PACKAGES[@]}"
          WEAVE
          PYTHON_DAEMON
          CMAKE
          SWIG
          NFQUEUE_BINDINGS
          PYINOTIFY
          DNSPYTHON
          PYTHON_IPY
          TCPDUMP
          SCAPY
          LIBCAP_NG
          PYTHON_CONFIGOBJ
          NFDHCPD
          EBTABLES
          FOLD
          LIBSODIUM
          ZEROMQ
          LIBYAML
          DMIDECODE
          VIRT_WHAT
          SALT)
